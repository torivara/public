{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vmName": {
            "type": "string",
            "maxLength": 12,
            "minLength": 3,
            "metadata": {
                "description": "Name of the Virtual Machine."
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for the Virtual Machine."
            }
        },
        "adminPasswordOrKey": {
            "type": "securestring",
            "metadata": {
                "description": "SSH Key or password for the Virtual Machine. SSH key is recommended for Linux VMs."
            }
        },
        "windowsOSVersion": {
            "type": "string",
            "defaultValue": "2019-Datacenter",
            "allowedValues": [
                "2008-R2-SP1",
                "2012-Datacenter",
                "2012-R2-Datacenter",
                "2016-Nano-Server",
                "2016-Datacenter-with-Containers",
                "2016-Datacenter",
                "2019-Datacenter"
            ],
            "metadata": {
                "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."
            }
        },
        "ubuntuOSVersion": {
            "type": "string",
            "defaultValue": "18.04-LTS",
            "allowedValues": [
                "12.04.5-LTS",
                "14.04.5-LTS",
                "16.04.0-LTS",
                "18.04-LTS"
            ],
            "metadata": {
                "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_B2ms",
            "metadata": {
                "description": "Size of the virtual machine."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "existingVnetName": {
            "defaultValue": "",
            "type": "string"
        },
        "existingVnetRgName": {
            "defaultValue": "",
            "type": "string"
        },
        "existingSubnetName": {
            "defaultValue": "",
            "type": "string"
        },
        "platform": {
            "type": "string",
            "defaultValue": "WinSrv",
            "allowedValues": [
                "WinSrv",
                "Linux"
            ],
            "metadata": {
                "description": "Select the OS type to deploy."
            }
        },
        "authenticationType": {
            "type": "string",
            "defaultValue": "password",
            "allowedValues": [
                "password",
                "sshPublicKey"
            ],
            "metadata": {
                "description": "Select the authentication type."
            }
        },
        "clientPublicIP": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Write your own public client IP to add NSG exception."
            }
        }
    },
    "variables": {
        "prefix": "<your prefix here>",
        "storageAccountName": "[concat('diag', uniquestring(resourceGroup().id))]",
        "pipName": "[concat(variables('prefix'), '-', parameters('vmName'), '-publicip')]",
        "pipFqdn": "[variables('pipName')]",
        "vmName": "[concat(variables('prefix'), parameters('vmName'))]",
        "nicName": "[variables('prefix'), parameters('vmName'), '-NIC1')]",
        "subnetRef": "[resourceId(parameters('existingVnetRgName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVnetName'), parameters('existingSubnetName'))]",
        "networkSecurityGroupName": "[concat(variables('prefix'), parameters('vmName'))]",
        "Linux": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "[parameters('ubuntuOSVersion')]",
            "version": "latest"
        },
        "WinSrv": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('windowsOSVersion')]",
            "version": "latest"
        },
        "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                        "keyData": "[parameters('adminPasswordOrKey')]"
                    }
                ]
            }
        }
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2018-11-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "Storage",
            "properties": {}
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2018-11-01",
            "name": "[variables('publicIPAddressName')]",
            "location": "[parameters('location')]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[variables('pipFqdn')]"
                }
            }
        },
        {
            "comments": "[concat('Automatic NSG for protecting VM ', variables('vmName')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-08-01",
            "name": "[variables('networkSecurityGroupName')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "AllowRdpInBound",
                        "properties": {
                            "priority": 100,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "3389",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefixes": [
                                "[parameters('clientPublicIP')]"
                            ],
                            "destinationAddressPrefix": "*"
                        }
                    },
                    {
                        "name": "AllowSshInBound",
                        "properties": {
                            "priority": 200,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "22",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefixes": [
                                "[parameters('clientPublicIP')]"
                            ],
                            "destinationAddressPrefix": "*"
                        }
                    }
                ]
            }
        },
        {
            "name": "[concat(variables('networkSecurityGroupName'),'/AllowRdpInBound')]",
            "type": "Microsoft.Network/networkSecurityGroups/securityRules"
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
            ],
            "condition": "[not(empty(parameters('ClientPublicIP')))]",
            "apiVersion": "2019-11-01",
            "properties": {
                "description": "Automatic rule which allows RDP from Client Public IP if specified.",
                "protocol": "tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "3389",
                "sourceAddressPrefixes": [
                    "[parameters('clientPublicIP')]"
                ],
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 100,
                "direction": "Inbound"
            }
        },
        {
            "name": "[concat(variables('networkSecurityGroupName'),'/AllowSshInBound')]",
            "type": "Microsoft.Network/networkSecurityGroups/securityRules"
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
            ],
            "condition": "[not(empty(parameters('ClientPublicIP')))]",
            "apiVersion": "2019-11-01",
            "properties": {
                "description": "Automatic rule which allows SSH from Client Public IP if specified.",
                "protocol": "tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "22",
                "sourceAddressPrefixes": [
                    "[parameters('clientPublicIP')]"
                ],
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 150,
                "direction": "Inbound"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2018-11-01",
            "name": "[variables('nicName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('pipName'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2018-10-01",
            "name": "[variables('vmName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[parameters('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPasswordOrKey')]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[if(equals(parameters('platform'), 'WinSrv'), variables('WinSrv').publisher, variables('Linux').publisher)]",
                        "offer": "[if(equals(parameters('platform'), 'WinSrv'), variables('WinSrv').offer, variables('Linux').offer)]",
                        "version": "latest",
                        "sku": "[if(equals(parameters('platform'), 'WinSrv'), variables('WinSrv').sku, variables('Linux').sku)]"
                    },
                    "osDisk": {
                        "createOption": "FromImage",
                        "name": "[concat(variables('vmName'), '-osDisk')]"
                    },
                    "dataDisks": [
                        {
                            "name": "[concat(variables('vmName'), '-dataDisk1')]",
                            "diskSizeGB": 32,
                            "lun": 0,
                            "createOption": "Empty"
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "hostname": {
            "type": "string",
            "value": "[reference(variables('pipName')).dnsSettings.fqdn]"
        }
    }
}